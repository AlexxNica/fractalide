{ buffet }:
let
callPackage = buffet.pkgs.lib.callPackageWith ( buffet.pkgs // buffet.support // buffet.support.crates-support // buffet );
# insert in alphabetical order to reduce conflicts
self = rec { # use one line only to insert a node (utils/new_node.py sorts this list)
  app_counter_add = callPackage ./app/counter/add {};
  app_counter_card = callPackage ./app/counter/card {};
  app_counter_counter = callPackage ./app/counter/counter {};
  app_counter_create = callPackage ./app/counter/create {};
  app_counter_delta = callPackage ./app/counter/delta {};
  app_counter_minus = callPackage ./app/counter/minus {};
  app_counter_view = callPackage ./app/counter/view { };
  app_counter_viewer = callPackage ./app/counter/viewer {};
  app_growtest = callPackage ./app/growtest {};
  app_model = callPackage ./app/model {};
  app_test = callPackage ./app/test {};
  app_todo_nodes = buffet.fractals.app_todo.nodes;
  app_todo_model_test = buffet.fractals.app_todo_model.nodes.test;
  app_todo_controller_test = buffet.fractals.app_todo_controller.nodes.test;
  bench = callPackage ./bench {};
  bench_load = callPackage ./bench/load {};
  bench_inc_1000 = callPackage ./bench/inc_1000 {};
  bench_inc = callPackage ./bench/inc {};
  debug = callPackage ./debug {};
  docs = callPackage ./docs {};
  drop_ip = callPackage ./drop/ip {};
  dt_vector_split_by_outarr_count = callPackage ./dt/vector/split/by/outarr/count {};
  example_wrangle = buffet.fractals.example_wrangle.nodes.example_wrangle;
  fs_dir_list = callPackage ./fs/dir/list {};
  fs_file_open = callPackage ./fs/file/open {};
  lain = callPackage ./shells/lain {};
  halter = callPackage ./halter {};
  io_print = callPackage ./io/print {};
  msg_action = callPackage ./msg/action {};
  msg_clone = callPackage ./msg/clone {};
  msg_delay = callPackage ./msg/delay {};
  msg_dispatcher = callPackage ./msg/dispatcher {};
  msg_replace = callPackage ./msg/replace {};
  nanomsg_nodes = buffet.fractals.nanomsg.nodes;
  nanomsg_test = buffet.fractals.nanomsg.nodes.workbench;
  maths_boolean_and = callPackage ./maths/boolean/and {};
  maths_boolean_nand = callPackage ./maths/boolean/nand {};
  maths_boolean_not = callPackage ./maths/boolean/not {};
  maths_boolean_or = callPackage ./maths/boolean/or {};
  maths_boolean_print = callPackage ./maths/boolean/print {};
  maths_boolean_xor = callPackage ./maths/boolean/xor {};
  maths_number_add = callPackage ./maths/number/add {};
  net_http_nodes = buffet.fractals.net_http.nodes;
  net_ndn = buffet.fractals.net_ndn.nodes.ndn;
  net_ndn_test = buffet.fractals.net_ndn.nodes.test;
  core_capnp_encode = callPackage ./core/capnp/encode {};
  core_find_node = callPackage ./core/find/node {};
  core_find_edge = callPackage ./core/find/edge {};
  core_errors = callPackage ./core/errors {};
  core_parser_graph_check = callPackage ./core/parser/graph/check {};
  core_parser_graph_print = callPackage ./core/parser/graph/print {};
  core_parser_lexical = callPackage ./core/parser/lexical {};
  core_parser_semantic = callPackage ./core/parser/semantic {};
  core_scheduler = callPackage ./core/scheduler {};
  core_subgraph = callPackage ./core/subgraph {};
  core_vm = callPackage ./core/vm {};
  print_file_with_feedback = callPackage ./print/file/with/feedback {};
  print_with_feedback = callPackage ./print/with/feedback {};
  shells_lain_commands = callPackage ./shells/lain/commands {};
  shells_lain_commands_print = callPackage ./shells/lain/commands/print {};
  shells_lain_commands_dirname = callPackage ./shells/lain/commands/dirname {};
  shells_lain_flow = callPackage ./shells/lain/flow {};
  shells_lain_parse = callPackage ./shells/lain/parse {};
  shells_lain_prompt = callPackage ./shells/lain/prompt {};
  test_dm = callPackage ./test/dm {};
  test_sjm = callPackage ./test/sjm {};
  ui_js_nodes = buffet.fractals.ui_js.nodes;
  web_server = callPackage ./web/server {};
  workbench = buffet.fractals.workbench.nodes.workbench;
  workbench_test = buffet.fractals.workbench.nodes.test;
}; # use one line only to insert a node (utils/new_node.py sorts this list)
in
self
